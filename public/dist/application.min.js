"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","ui.bootstrap.datetimepicker"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("buddyevents"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("members"),ApplicationConfiguration.registerModule("teams"),ApplicationConfiguration.registerModule("users"),angular.module("buddyevents").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Buddyevents","buddyevents","",null,null,null,3)}]),angular.module("buddyevents").config(["$stateProvider",function($stateProvider){$stateProvider.state("listBuddyevents",{url:"/buddyevents",templateUrl:"modules/buddyevents/views/list-buddyevents.client.view.html"}).state("createBuddyevent",{url:"/buddyevents/create",templateUrl:"modules/buddyevents/views/create-buddyevent.client.view.html"}).state("viewBuddyevent",{url:"/buddyevents/:buddyeventId",templateUrl:"modules/buddyevents/views/view-buddyevent.client.view.html"}).state("editBuddyevent",{url:"/buddyevents/:buddyeventId/edit",templateUrl:"modules/buddyevents/views/edit-buddyevent.client.view.html"})}]),angular.module("buddyevents").controller("BuddyeventsController",["$scope","$stateParams","$location","$rootScope","Authentication","Buddyevents","Teams","AcitveTeamFactory",function($scope,$stateParams,$location,$rootScope,Authentication,Buddyevents,Teams,AcitveTeamFactory){$scope.authentication=Authentication,$scope.init=function(){$scope.teams=Teams.query();var teamId=AcitveTeamFactory.getActiveTeam();teamId&&($scope.team=Teams.get({teamId:teamId}))},$scope.findOne=function(){$scope.buddyevent=Buddyevents.get({buddyeventId:$stateParams.buddyeventId})},$scope.add=function(){var team=this.team,buddyevent={title:this.title,description:this.description,from:this.data.from,to:this.data.to};team.buddyevents.push(buddyevent);team.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.update=function(){var buddyevent=this.buddyevent;buddyevent.$update(function(){$location.path("buddyevents/"+buddyevent._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(buddyevent){var team=this.team;for(var i in team.buddyevents)team.buddyevents[i]===buddyevent&&team.buddyevents.splice(i,1);team.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.changeTeam=function($event,_id){$event.preventDefault(),$rootScope.team=Teams.get({teamId:_id})}}]),angular.module("buddyevents").factory("Buddyevents",["$resource",function($resource){return $resource("buddyevents/:buddyeventId",{buddyeventId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("chooseTeam",["Teams","AcitveTeamFactory",function(Teams,AcitveTeamFactory){return{restrict:"E",templateUrl:"modules/core/directives/core.client.chooseTeam.directive.html",controller:["$scope","$element",function($scope){$scope.changeTeam=function($event,_id){$event.preventDefault(),AcitveTeamFactory.setActiveTeam(_id),$scope.team=Teams.get({teamId:_id})}}]}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").service("AcitveTeamFactory",["Teams",function(){this.setActiveTeam=function(id){this.activeTeam=id},this.getActiveTeam=function(){return this.activeTeam}}]),angular.module("members").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Mitglieder","members","",null,null,null,2)}]),angular.module("members").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMembers",{url:"/members",templateUrl:"modules/members/views/list-members.client.view.html"}).state("createMember",{url:"/members/create",templateUrl:"modules/members/views/create-members.client.view.html"}).state("viewMember",{url:"/members/:memberId",templateUrl:"modules/members/views/view-members.client.view.html"}).state("editMember",{url:"/team/:teamId/members/:memberId/edit",templateUrl:"modules/members/views/edit-members.client.view.html"})}]),angular.module("members").controller("MembersController",["$scope","$stateParams","$location","$rootScope","Authentication","Teams","Members","AcitveTeamFactory",function($scope,$stateParams,$location,$rootScope,Authentication,Teams,Members,AcitveTeamFactory){$scope.authentication=Authentication,$scope.find=function(){$scope.teams=Teams.query();var teamId=AcitveTeamFactory.getActiveTeam();teamId&&($scope.team=Teams.get({teamId:teamId}))},$scope.findOne=function(){$scope.member=Members.get({memberId:$stateParams.memberId})},$scope.add=function(){var team=this.team,member={firstname:this.firstname,lastname:this.lastname};team.members.push(member);var _this=this;team.$update(function(){_this.firstname="",_this.lastname=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.update=function(){var member=$scope.member;member.$update(function(){$location.path("members/"+member._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(member){var team=$scope.team;for(var i in team.members)team.members[i]===member&&team.members.splice(i,1);team.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.changeTeam=function($event,_id){$event.preventDefault(),AcitveTeamFactory.setActiveTeam(_id),$scope.team=Teams.get({teamId:_id})}}]),angular.module("members").factory("Members",["$resource",function($resource){return $resource("members/:memberId",{memberId:"@_id"},{update:{method:"PUT"}})}]),angular.module("teams").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Team","teams","",null,null,null,1)}]),angular.module("teams").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTeams",{url:"/teams",templateUrl:"modules/teams/views/list-teams.client.view.html"}).state("createTeam",{url:"/teams/create",templateUrl:"modules/teams/views/create-team.client.view.html"}).state("viewTeam",{url:"/teams/:teamId",templateUrl:"modules/teams/views/view-team.client.view.html"}).state("editTeam",{url:"/teams/:teamId/edit",templateUrl:"modules/teams/views/edit-team.client.view.html"})}]),angular.module("teams").controller("TeamsController",["$scope","$stateParams","$location","$rootScope","Authentication","Teams",function($scope,$stateParams,$location,$rootScope,Authentication,Teams){$scope.authentication=Authentication,$scope.create=function(){var team=new Teams({name:this.name,description:this.description});team.$save(function(){$location.path("teams"),$scope.name="",$scope.description="",$scope.teams=Teams.query()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.addMember=function(){var member={firstname:this.firstname,lastname:this.lastname,email:this.email,password:"password"},team=$scope.team;team.members.push(member),console.log(team),team.$update(function(){$location.path("team/"+team._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.add=function(){var team=this.team,member={firstName:this.firstName,lastName:this.lastName};team.members.push(member);var _this=this;team.$update(function(){_this.firstName="",_this.lastName=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(team){if(team){team.$remove();for(var i in $scope.teams)$scope.teams[i]===team&&$scope.teams.splice(i,1)}},$scope.update=function(){var team=$scope.team;team.$update(function(){$location.path("teams/"+team._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.teams=Teams.query()},$scope.findOne=function(){$scope.team=Teams.get({teamId:$stateParams.teamId})},$scope.changeTeam=function($event,_id){$event.preventDefault(),$rootScope.team=Teams.get({teamId:_id})}}]),angular.module("teams").factory("Teams",["$resource",function($resource){return $resource("teams/:teamId",{teamId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("create",{url:"/team/:teamId/members/create",templateUrl:"modules/users/views/create-user.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("UsersController",["$scope","$http","$location","$stateParams","Users","Authentication","Teams",function($scope,$http,$location,$stateParams,Users,Authentication,Teams){$scope.user=Authentication.user;var Team=Teams.get({teamId:$stateParams.teamId});console.log(Team),$scope.createMember=function(){var Member=new Users({firstName:this.firstName,lastName:this.lastName,email:this.email,team:Team._id});Member.$save(function(){},function(error){console.log(error)})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);